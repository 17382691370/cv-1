{"version":3,"sources":["main.js"],"names":["html","document","querySelector","style","string","string2","n","step","setTimeout","innerHTML","substring","window","scrollTo","length"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAIA,OAAOC,SAASC,aAAT,CAAuB,OAAvB,CAAX;AACA,IAAIC,QAAQF,SAASC,aAAT,CAAuB,QAAvB,CAAZ;;AAGA,IAAIE,2uCAAJ;AA6CA,IAAIC,UAAU,EAAd;AACA;AACA;AACA,IAAIC,IAAI,CAAR;;AAGA,IAAIC,OAAO,SAAPA,IAAO,GAAM;AACbC,eAAW,YAAI;AACX;AACA;AACA;AACA,YAAIJ,OAAOE,CAAP,MAAc,IAAlB,EAAuB;AACpBD,uBAAU,MAAV;AACF,SAFD,MAEO,IAAID,OAAOE,CAAP,MAAc,GAAlB,EAAsB;AAC1BD,uBAAW,QAAX;AACF,SAFM,MAED;AACHA,uBAAWD,OAAOE,CAAP,CAAX;AACF;AACD;AACAN,aAAKS,SAAL,GAAiBJ,OAAjB;AACAF,cAAMM,SAAN,GAAkBL,OAAOM,SAAP,CAAiB,CAAjB,EAAoBJ,CAApB,CAAlB;AACA;AACAK,eAAOC,QAAP,CAAgB,CAAhB,EAAkB,MAAlB;AACAZ,aAAKY,QAAL,CAAc,CAAd,EAAgB,KAAhB;AACA,YAAGN,IAAIF,OAAOS,MAAP,GAAc,CAArB,EAAuB;AACpB;AACAP,iBAAK,CAAL;AACAC;AACF,SAJD,MAIK;AACD;AACH;AACJ,KAxBD,EAwBE,EAxBF;AAyBH,CA1BD;;AA4BAA","file":"main.71e9e806.map","sourceRoot":"..\\src","sourcesContent":["let html = document.querySelector('#html');\r\nlet style = document.querySelector(\"#style\");\r\n\r\n\r\nlet string = `/* Hello,下面你将会欣赏到一个八卦的形成 \r\n * Ready\r\n * Go \r\n **/ \r\n#div1{\r\n    border: 1px solid red;\r\n    width: 200px;\r\n    height: 200px;\r\n}\r\n/* 接下来我把div变成八卦图\r\n * 首先把div变成一个圆\r\n **/\r\n#div1{\r\n    border-radius: 50%;\r\n    box-shadow: 0 0 3px rgba(0,0,0,0.5);\r\n    border: none;\r\n}\r\n\r\n/* 八卦一黑一白\r\n **/\r\n#div1{\r\n    background: linear-gradient(90deg, rgba(255,255,255,1) 0%, rgba(255,255,255,1) 50%, rgba(0,0,0,1) 50%, rgba(0,0,0,1) 100%);\r\n}\r\n/* 加两个球 */\r\n#div1::before{\r\n   width: 100px;\r\n   height: 100px;\r\n   top: 0;\r\n   left: 50%;\r\n   transform: translateX(-50%);\r\n   background: #000;\r\n   border-radius: 50%;\r\n   background: radial-gradient(circle, rgba(255,255,255,1) 0%, rgba(255,255,255,1) 25%, rgba(0,0,0,1) 25%, rgba(0,0,0,1) 100%);\r\n}\r\n#div1::after{\r\n    width: 100px;\r\n    height: 100px;  \r\n    bottom: 0;\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n    background: #fff;\r\n    border-radius: 50%;\r\n    background: radial-gradient(circle, rgba(0,0,0,1) 0%, rgba(0,0,0,1) 25%, rgba(255,255,255,1) 25%, rgba(255,255,255,1) 100%);\r\n }\r\n`;\r\nlet string2 = '';\r\n//正则表达式 可以表示所有的回车 /\\n/g，但是页面会显示 '<'\r\n//string = string.replace(/\\n/g, \"<br>\");\r\nlet n = 0;\r\n\r\n\r\nlet step = () => {\r\n    setTimeout(()=>{\r\n        //如果是回车\r\n        //如果不是回车就照搬\r\n        //HTML中回车是<br>空格是&nbsp；\r\n        if (string[n] === '\\n'){\r\n           string2 +='<br>'\r\n        } else if (string[n] === ' '){\r\n           string2 += \"&nbsp;\"\r\n        } else{\r\n           string2 += string[n];\r\n        }\r\n        // string2 += (string[n] === '\\n' ? \"<br>\" : string[n]);\r\n        html.innerHTML = string2;\r\n        style.innerHTML = string.substring(0, n);\r\n        //页面滚到最底部\r\n        window.scrollTo(0,999999); \r\n        html.scrollTo(0,99999);  \r\n        if(n < string.length-1){\r\n           //如果n不是最后一个就继续\r\n           n += 1;\r\n           step();   \r\n        }else{\r\n            //n是最后一个\r\n        }\r\n    },50)    \r\n};\r\n\r\nstep();\r\n\r\n\r\n\r\n"]}